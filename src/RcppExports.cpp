// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_gini
double c_gini(NumericVector x);
RcppExport SEXP _catsim_c_gini(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_gini(x));
    return rcpp_result_gen;
END_RCPP
}
// c_ginicorr
double c_ginicorr(NumericVector x, double k);
RcppExport SEXP _catsim_c_ginicorr(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ginicorr(x, k));
    return rcpp_result_gen;
END_RCPP
}
// c_cfunc
double c_cfunc(NumericVector x, NumericVector y, double c, double k, bool sqrtflag);
RcppExport SEXP _catsim_c_cfunc(SEXP xSEXP, SEXP ySEXP, SEXP cSEXP, SEXP kSEXP, SEXP sqrtflagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type sqrtflag(sqrtflagSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cfunc(x, y, c, k, sqrtflag));
    return rcpp_result_gen;
END_RCPP
}
// c_meansfunc
double c_meansfunc(NumericVector x, NumericVector y, double c);
RcppExport SEXP _catsim_c_meansfunc(SEXP xSEXP, SEXP ySEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(c_meansfunc(x, y, c));
    return rcpp_result_gen;
END_RCPP
}
// c_cohen
double c_cohen(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_c_cohen(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_cohen(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_adj_rand
double c_adj_rand(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_c_adj_rand(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_adj_rand(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_rand
double c_rand(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_c_rand(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_rand(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_nmi
double c_nmi(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_c_nmi(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_nmi(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_ami
double c_ami(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_c_ami(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_ami(x, y));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_catsim_c_gini", (DL_FUNC) &_catsim_c_gini, 1},
    {"_catsim_c_ginicorr", (DL_FUNC) &_catsim_c_ginicorr, 2},
    {"_catsim_c_cfunc", (DL_FUNC) &_catsim_c_cfunc, 5},
    {"_catsim_c_meansfunc", (DL_FUNC) &_catsim_c_meansfunc, 3},
    {"_catsim_c_cohen", (DL_FUNC) &_catsim_c_cohen, 2},
    {"_catsim_c_adj_rand", (DL_FUNC) &_catsim_c_adj_rand, 2},
    {"_catsim_c_rand", (DL_FUNC) &_catsim_c_rand, 2},
    {"_catsim_c_nmi", (DL_FUNC) &_catsim_c_nmi, 2},
    {"_catsim_c_ami", (DL_FUNC) &_catsim_c_ami, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_catsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
