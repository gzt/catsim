// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// C_gini
double C_gini(NumericVector x);
RcppExport SEXP _catsim_C_gini(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_gini(x));
    return rcpp_result_gen;
END_RCPP
}
// C_ginicorr
double C_ginicorr(NumericVector x, double k);
RcppExport SEXP _catsim_C_ginicorr(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ginicorr(x, k));
    return rcpp_result_gen;
END_RCPP
}
// C_cfunc
double C_cfunc(NumericVector x, NumericVector y, double c, double k, bool sqrtflag);
RcppExport SEXP _catsim_C_cfunc(SEXP xSEXP, SEXP ySEXP, SEXP cSEXP, SEXP kSEXP, SEXP sqrtflagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type sqrtflag(sqrtflagSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cfunc(x, y, c, k, sqrtflag));
    return rcpp_result_gen;
END_RCPP
}
// C_meansfunc
double C_meansfunc(NumericVector x, NumericVector y, double c);
RcppExport SEXP _catsim_C_meansfunc(SEXP xSEXP, SEXP ySEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(C_meansfunc(x, y, c));
    return rcpp_result_gen;
END_RCPP
}
// C_Cohen
double C_Cohen(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_C_Cohen(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_Cohen(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_AdjRand
double C_AdjRand(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_C_AdjRand(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_AdjRand(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_Rand
double C_Rand(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_C_Rand(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_Rand(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_NMI
double C_NMI(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_C_NMI(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_NMI(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_AMI
double C_AMI(NumericVector x, NumericVector y);
RcppExport SEXP _catsim_C_AMI(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_AMI(x, y));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_catsim_C_gini", (DL_FUNC) &_catsim_C_gini, 1},
    {"_catsim_C_ginicorr", (DL_FUNC) &_catsim_C_ginicorr, 2},
    {"_catsim_C_cfunc", (DL_FUNC) &_catsim_C_cfunc, 5},
    {"_catsim_C_meansfunc", (DL_FUNC) &_catsim_C_meansfunc, 3},
    {"_catsim_C_Cohen", (DL_FUNC) &_catsim_C_Cohen, 2},
    {"_catsim_C_AdjRand", (DL_FUNC) &_catsim_C_AdjRand, 2},
    {"_catsim_C_Rand", (DL_FUNC) &_catsim_C_Rand, 2},
    {"_catsim_C_NMI", (DL_FUNC) &_catsim_C_NMI, 2},
    {"_catsim_C_AMI", (DL_FUNC) &_catsim_C_AMI, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_catsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
